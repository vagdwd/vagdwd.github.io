/*
-----------
0. 247Conf
1. uAParser
2. tracker
3. 247pxutils
4. wowpxappjs
5. emilejs
6. jamljs
7. wowpxappbundle
generated by psp: Sat Mar 23 07:31:01 GMT 2013-----------
*/
/*0. 247Conf*/
/**
 * @identity 247Conf
 * 
 */
if (typeof SN === "undefined") {
    SN = {};
}

SN.Conf = (function (){
    
    function getEncodedValue(value) {
        switch (value) {
        case "247testsite.com/test.html":
            return "h";
        case "abcd type of product category":
            return "a";
        default:
            // If nothing matches, return as is.
            return value;
        }
    }

    function getDecodedValue(encodedValue){
        if(encodedValue == "h"){
                return "http://247testsite.com/test.html";
        }
        else if(encodedValue == "Y"){
                return "in.yahoo.com";
        }else if(encodedValue == "G"){
                return "www.google.co.in";
        }
        else{
                return encodedValue;
        }

    }

    function getUrlId() {
        var loc = (location.pathname.match(/247SN.htm/))?parent.location:location;
        var hash = loc.hash;
        var path = loc.pathname;
        if (path.match(/^\/FORYOURHOME\/GOFLOW/i)) { //GO-FLOW ORDER-NEW PAGES
            if (path.match(/\/OrderNew\/BuildBundle.aspx/i)) { //Build Bundle Page
                return "o_bbp";
            } else if (path.match(/\/OrderNew\/directordering.aspx/i)) { //DO Landing page
                return "o_dol";
            } else if (path.match(/\/OrderNew\/FIOSTVCONFIG.ASPX/i)) { //FiOS TV Config page
                return "o_ftc";
            } else if (path.match(/\/OrderNew\/FIOSDATACONFIG.ASPX/i)) { //FiOS Int Config page
                return "o_fdc";
            } else if (path.match(/\/OrderNew\/FDVOICECONFIG.ASPX/i)) { //FDV Config Page
                return "o_fdv";
            } else if (path.match(/\/OrderNew\/VOICECONFIG.ASPX/i)) { //Phone Config page
                return "o_voc";
            } else if (path.match(/\/OrderNew\/ADDTLOFFERS.ASPX/i)) { //Upsell
                return "o_ado";
            } else if (path.match(/\/OrderNew\/REVIEWORDER.ASPX/i)) { //Review Order
                return "o_rvo";
            } else if (path.match(/\/OrderNew\/BillingCredit.ASPX/i)) { //Checkout Page 1 (Personal & Billing Info)
                return "o_bcr";
            } else if (path.match(/\/OrderNew\/DDANDTOS.ASPX/i)) { //Checkout page 2 (DD & TOS)
                return "o_tos";
            } else if (path.match(/\/OrderNew\/ORDERSUMMARY.ASPX/i)) { //Checkout page 3 (Order Summary)
                return "o_sum";
            } else if (path.match(/\/OrderNew\/XPSSAVEORDER.ASPX/i)) { //Save Order
                return "o_xso";
            } else if (path.match(/\/OrderNew\/XPSSaveOrderConfirmation.aspx/i)) { //Save Order Confirmation
                return "o_xsc";
            } else { //GO-FLOW ORDER-NEW PAGES DEFAULT
                return "o";
            }
        } else {
            return "g"; //DEFAULT VALUE
        }
    }
    
    function setConfStg () {
        if (this.DOMAIN_VS_ENV[document.domain]) {
            this.CUSTOM_TRACK_SERVER = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["CUSTOM_TRACK_SERVER"];
            this.PSP_ROOT = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["PSP_ROOT"];
            this.CONST_PSP_ROOT = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["CONST_PSP_ROOT"];
            this.CONST_PSP_CDN_ROOT = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["CONST_PSP_CDN_ROOT"];
            this.SPACER_IMAGEPATH = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["SPACER_IMAGEPATH"];
            this.PROXY_SERVER = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["PROXY_SERVER"];
            this.CONST_PSP_CHECKSERVER = this.ENV_VS_247DOMAINS[this.DOMAIN_VS_ENV[document.domain]]["CONST_PSP_CHECKSERVER"];
        }
    }
    
    return {
	CONST_PSP_KEY : "verizon-v1-001",
	DOMAIN_VS_PARAMETIZED_PATH_AND_EXTENSION : {"www98.verizon.com" : "/psp247/247SN.htm", 
                                                    "www25.verizon.com" : "/psp247/247SN.htm",
                                                    "www26.verizon.com" : "/psp247/247SN.htm",
                                                    "www22.verizon.com" : "/psp247/247SN.htm"},
	DOMAIN_VS_ENV : {"www98.verizon.com" : "test",
                        "www25.verizon.com" : "test",
                        "www26.verizon.com" : "test",
                        "www22.verizon.com" : "prod"},
        ENV_VS_247DOMAINS : {
            "test" : {
                CUSTOM_TRACK_SERVER : "cdnstg.px.247-inc.com",
                PSP_ROOT : "pspstg.px.247-inc.com",
                CONST_PSP_ROOT : "pspstg.px.247-inc.com",
                SPACER_IMAGEPATH : "pspstg.px.247-inc.com/",
                PROXY_SERVER : "pspstg.px.247-inc.com/tps/tpsp.php?",
                CONST_PSP_CDN_ROOT : "d3v0wzbeith6d8.cloudfront.net",
                CONST_PSP_CHECKSERVER : "stgcheckpxoe.px.247-inc.com"
            },
            "prod" : {
                CUSTOM_TRACK_SERVER : "verizoncdn.px.247-inc.com",
                PSP_ROOT : "verizonpsp.px.247-inc.com",
                CONST_PSP_ROOT : "verizonpsp.px.247-inc.com",
                SPACER_IMAGEPATH : "verizonpsp.px.247-inc.com/",
                PROXY_SERVER : "verizonpsp.px.247-inc.com/tps/tpsp.php?",
                CONST_PSP_CDN_ROOT : "d1af033869koo7.cloudfront.net",
                CONST_PSP_CHECKSERVER : "checkpxoe.px.247-inc.com"
            }
        },
        CUSTOM_TRACK_SERVER : "verizoncdn.px.247-inc.com",
	CONST_PXFWK_ID : "pxfwk.gz.js",
	CONST_CDN_VERSION : "v0.7",//change cdn version accordingly.
	CONST_PSP_VERSION : "default",
	COOKIEPATH : ["verizon.com"],//change it to client domain where we want to set the cookie.
	PSP_ROOT : "www.foo.bar",//change this to psp server domain.Example "psp.247ilabs.com"
        PSP_VERSION : "default",
	PXOE_VERSION : "5.3",
	TRACKING_VERSION : "1.2",
	getDecodedValue : getDecodedValue,
	getEncodedValue : getEncodedValue,
	IS_DS_REQUIRED : false,
	getUrlId : getUrlId,
        setConfStg : setConfStg,
	
	//custom script variables
	CONST_PSP_ROOT : "www.foo.bar", 
	CONST_PSP_CDN_ROOT : "d1af033869koo7.cloudfront.net",
    CONST_PSP_STAGE : "p", //p="prod" , t = "test"
    CONST_PSP_CLIENT_KEY : "verizon-v1-001",
    pspxdPath : "/verizon-v1-001/pspxd.html", // ex: "/pspxd.html"
    CONST_PSP_VISITOR_PERCENTAGE : 100,// psp visitor percentage
    PROXY_SERVER : "verizonpsp.px.247-inc.com/tps/tpsp.php?",//proxy server for third party communication
    pollingTime : 10000,
    varmap : {"lpchatvar" : "true"},
    trackingUrlFlag : false,
    varMapFlag : false,
	FSM : {
	    //<key> : <expression> ,//Add FSM key and values here as required
	    currentPageUrl : "document.location.href",
	    referrer : "parent.document.referrer",
	    title : "parent.document.title",
	    el : "SN.Conf.getDecodedValue(SN.CookieManager.readSNCookie(\"sn.eh\",\"el\"))"
	},
	ED : {
	    //<key> : <expression> ,//Add Extra Data key and values here as required
	   // <key> : <expression> 
	},
	TEST_PERCENTAGE : 0, //This is percentage for test visitors.For example:TEST_PERCENTAGE : 30
	BYPASS_PERCENTAGE : 0,//PXOE wont serve for this percentage visitor.For example BYPASS_PERCENTAGE : 30
        SPACER_IMAGEPATH : "verizonpsp.px.247-inc.com/",
        CONST_PSP_CHECKSERVER  : "checkpxoe.px.247-inc.com"
    };
}());

SN.Conf.setConfStg();
/*1. uAParser*/

/**
 * @identity uAParser
 * @requires 247Conf
 */
if (typeof SN === "undefined") {
    SN = {};
}

SN.Constants = (function(){
    var me = {
        /**
         * constants to be used in loader
         */
         UNDEFINED_STR : "undefined",
         
         //LOG Levels
       	 LOGLEVEL_ERROR : "e",
       	 LOGLEVEL_WARN : "w",
         LOGLEVEL_DEBUG : "d",
         LOGLEVEL_INFO : "i",
        
        //cookie names
         SN_BS_COOKIE_NAME : "sn.bs",
         SN_AS_COOKIE_NAME : "sn.as",
         SN_UI_COOKIE_NAME : "sn.ui",    
         SN_VI_COOKIE_NAME : "sn.vi" ,
         SN_RN_COOKIE_NAME : "sn.rn",
         SN_EXIT_HISTORY_COOKIE_NAME: "sn.eh",
         SN_VARIABLE_COOKIE_NAME : "sn.vc", 
		 SN_WEBTRACKER_COOKIE_NAME : "sn.wt",
		 SN_WINDOW_SESSION_COOKIE_NAME : "sn.ws",
		 SN_VISITOR_COOKIE_NAME : "sn.vi",
         IS_ENV_SUPPORTED_OR_NOT : "es",
         
        	 
         KEY_VALUE_SEPERATOR : '||',
         KEY_VALUE_SEPERATOR_OLD : '#',
         KEY_SEPERATOR : '~'
             
         };
        return me;
    }());


SN.Utils = (function(){
    function undefinedOrNull(param) {
	    return ((param == "undefined") || (param == null) || (param === "null"));
    }
    
    var me = {
	    undefinedOrNull : undefinedOrNull   
    };
    
    return me;
    
}());
SN.Logger = (function() {
    /*
     * a flag added to control logging.by default logging is off.
     */
     var SN_CONSTANTS = SN.Constants;
    var shouldLog = false;
    function consoleLog(message) {
	if (!shouldLog) {
	    return;
	}
	if (typeof console != SN_CONSTANTS.UNDEFINED_STR) {
	    console.log(message);
	}
    }
    var me = {
	consoleLog : consoleLog
         };
        return me;
   }());

SN.UserAgentParser = (function() {
 
	var browserIdentifier = navigator.userAgent;   
	var UNKNOWN = "unknown";
    
    var browserDetails = "";
    var KEY_SEPERATOR = '~';

	var deviceDetails = "others";
	var deviceType = "U";
		
    var OSType = UNKNOWN;
    var OSVersion = UNKNOWN;
    var logger = SN.Logger;
	
	var OSList = 									//this has the OStype and OSVersion except for Android and Unix which will be handled separately
 		{
 			Win:	{	osType 		: "Windows",
 						osVersion	: {	"NT 5.1" : "XP",
 										"NT 6.0" : "Vista",
 										"NT 6.1" : "7",
 										"NT 6.2" : "8" }
 					},
 			Mac:	{	osType		: "MacOS",
 						osVersion	: {	"Mac OS X 10_4" : "Tiger",
 										"Mac OS X 10.4" : "Tiger",
 										"Mac OS X 10_5" : "Leopard",
 										"Mac OS X 10.5" : "Leopard",
 										"Mac OS X 10_6" : "Snow Leopard",
 										"Mac OS X 10.6" : "Snow Leopard" }
 					},
 			Linux:	{	osType		: "Linux",
 						osVersion	: {	"Ubuntu" 	: "Ubuntu",
 										"CentOS" 	: "CentOS",
 										"Red Hat" 	: "Red Hat",
 										"Mandriva" 	: "Mandriva",
 										"Gentoo" 	: "Gentoo",
 										"Debian" 	: "Debian",
 										"Fedora" 	: "Fedora" }
 					}
 		};
 	
    function getChromeOrFirefoxOrSafariVersion(browserName) //Chrome,FF,Safari has the same method of getting the version
	{
		if(browserName!=null)
		{
		var splitAtBrowserName = browserIdentifier.split(browserName);
		var regex = /(\d+\.)+\d+/;
		var version = regex.exec(splitAtBrowserName[1]);
		return version[0];
		}
	}
	
	var browserList = 
		{
			Firefox:{ 	lowestSupportedVersion : "3.6",
						blacklistedVersions : [],	// This will be an array of blacklisted versions; eg : - if its - ["14.0.1", "13.1.2"], neither of them would be supported. Similarily for others
						
						getVersion : function(){return getChromeOrFirefoxOrSafariVersion("Firefox/");}
								
					},
			Version:{	lowestSupportedVersion : "5",//all versions >=5 are supported
						blacklistedVersions : [],	
						getVersion : function(){return getChromeOrFirefoxOrSafariVersion("Version/");}
					},
			Chrome:	{	lowestSupportedVersion : "10",//all versions are >=10 supported
						blacklistedVersions : [],	
						getVersion : function(){return getChromeOrFirefoxOrSafariVersion("Chrome/");}
					},
			MSIE:	{	lowestSupportedVersion : "7", //all versions >6 are supported
						blacklistedVersions : [],	
						getVersion : function(){
									var regex = /MSIE (\d+\.)+\d+/;
									var versionString = regex.exec(browserIdentifier);
									var version = versionString[0].split(" ");
									return version[1];
									}
					}
		};


	var allDevicesList = 
		{
			Tablet: {	1 : ["tablet"],
						2 : ["android", "!mobile"],	//android and not mobile
						3 : ["ipad", "webkit"],
						4 : ["playbook"],			//blackberry tablet
						5 : ["kindle"],
						6 : ["xoom"]				//Motorola xoom
					},
			Mobile:	{	1 : ["iphone", "!ipad", "!ipod"],  
						2 : ["blackberry"],
						3 : ["android", "mobile"],
						4 : ["iemobile"],
						5 : ["windows phone"],
						6 : ["nokia"],
						7 : ["fennec"],		//Firefox's effort at mobile browser
						8 : ["mib"],		//Motorola
						9 : ["minimo"],		//Mozilla web browser
						10: ["symbian"], 	//mobile operating system
						11: ["netfront"], 	//Common embedded OS browser	
						12: ["up.browser"], //common on some phones
						13: ["openweb"], 	//Transcoding by OpenWave server
						14: ["opera mini"],
						15: ["opera mobi"],
						16: ["brew"],		//Detects whether the device is a Brew-powered device.
						17: ["danger"],		//Detects the Danger Hiptop device.
						18: ["hiptop"],		//Detects the Danger Hiptop device.
						19: ["midp"],	 	//a mobile Java technology
						20: ["webos"]	 	//For Palm's new WebOS devices
					},
					//only if it is not a tablet or a mobile, would the code flow come to this part of the map
					//hence we only need to check for OS.
			Desktop:{	1 :	["windows"],
						2 : ["linux"],
						3 : ["os\s+[x9]"],
						4 : ["solaris"],
						5 : ["bsd"]
					},
			Unknown:{	1 : ["others"]
					}
		};
					
							
	function isBrowser(key)
	{
		if(key  == "Version")
		{	
			if((browserIdentifier.indexOf("Opera") == -1) && (browserIdentifier.indexOf("Safari") != -1))
				return (browserIdentifier.indexOf(key) != -1);
			else
				return false;
		}
		return (browserIdentifier.indexOf(key) != -1);
	}

    function getOSType() {
	return OSType;
    }

    
    function getDeviceDetails()
    {
    	return OSType + KEY_SEPERATOR + deviceType ;
    }
    
    function intializeBrowserDetails()
    {
    	for (var key in browserList) {
			if(isBrowser(key) == true) {
				browserDetails = key.toLowerCase().charAt(0);	// if chrome send 'c', firefox - 'f'
				if( browserDetails == 'v') // if safari, send 's'
					browserDetails = 's';
				else if( browserDetails == 'm') // if IE, send 'i'
					browserDetails = 'i';
				browserDetails = browserDetails + KEY_SEPERATOR + browserList[key].getVersion();
			}
		}
	}
    function getBrowserDetails()
    {	
    	return browserDetails;
	}
	
 		
 	function initializeOSTypeAndVersion() 	{
 		
 		for(var OSString in OSList)	{
 			
 			if(browserIdentifier.indexOf(OSString) != -1)	{
			
				var versionList = OSList[OSString].osVersion;
				OSType = OSList[OSString].osType;
			
				for(var versionKey in versionList)	{
					
					if(browserIdentifier.indexOf(versionKey) != -1)	{
						OSVersion = versionList[versionKey];
					}
				}
			}
		}
		if(OSType == UNKNOWN)	{				//OSType is neither Windows, Linux nor MacOS; check for Android or UNIX
			var CONST_ANDROID_NAME = "Android";
			var index = -1;
			if (( index = browserIdentifier.indexOf(CONST_ANDROID_NAME)) != -1)	{
				OSType = CONST_ANDROID_NAME;
				OSVersion = browserIdentifier.substring(index + 8, index + 11);
			}
			else if (browserIdentifier.indexOf("X11") != -1)
				OSType = "UNIX";
		}
		if (OSVersion != UNKNOWN) {
		OSType = OSType + '-' + OSVersion;
	    }
	}			
 				
    // As per http://www.browserIdentifierstring.com
    
  
    function initializeDeviceDetails() {
    try {
   	
		var uAgentInLowercase = browserIdentifier.toLowerCase();
		var flag = 0;
		for( var deviceKey in allDevicesList) {			//deviceKey will have value : Tablet/Mobile/Desktop/Unknown
		
			var deviceList = allDevicesList[deviceKey];		//deviceList is the map with various devices of the type - deviceKey
			for(var listKey in deviceList) {			//listKey - 1,2,3 ...
			
				for ( var key in deviceList[listKey]) {	//first key will be the one stored in deviceDetails
					var stringTobeSearched = deviceList[listKey][key]; 
					if(stringTobeSearched.charAt(0) == '!'){
						//strings in the map starting with "!" should not be present in the userAgent
						if(uAgentInLowercase.indexOf(stringTobeSearched.substring(1)) == -1) {		
							flag = 1;
						}
						else {
							flag = 0;
						}
					}
					else {
						if(uAgentInLowercase.indexOf(stringTobeSearched) != -1) {
							flag = 1;
						}
						else {
							flag = 0;
						}
					}
				}
				if(flag == 1)		// we have found the correct device from the userAgent
				{	
					//extract the device Type
					deviceType = deviceKey.charAt(0);
					//storing the device in the deviceDetails. If none of them satisfies, deviceDetails will have the value "others"
					deviceDetails = deviceList[listKey]["0"];
					
					flag = 0;
					break;
				}
			}
		}
	}catch(err)
    {
    	logger.consoleLog("Error while initializing device details:",err);
    }
  	}
    	

    var me = {
	getOSType : getOSType,
	browserList : browserList,
	isBrowser : isBrowser,
	getBrowserDetails : getBrowserDetails,
	getDeviceDetails :getDeviceDetails	
    };
    
    initializeOSTypeAndVersion();
    initializeDeviceDetails();
    intializeBrowserDetails();			
    return me;
})();

/*2. tracker*/
/**
 * @identity tracker
 * @requires 247Conf, uAParser
 */

if (typeof SN === "undefined") {
    SN = {};
}

SN.loadTrackingScript = function(type, vid, ed, root, key, logLevel) {
	var SN_CONSTANTS = SN.Constants;
    try {
	var ts = new String(new Date().getTime());
	var pspTrack = document.createElement('script');
	pspTrack.type = 'text/javascript';
	var searchStr = "id=" + window.pspSNTrackingId + "&type=" + type + "&ts=" + ts;
	if (typeof vid !== SN_CONSTANTS.UNDEFINED_STR && vid != null) {
	    searchStr = searchStr + "&vid=" + vid;
	}
	var pathname = window.location.pathname;
	if (pathname.length > 200) {
	    pathname = pathname.substr(0, 200);
	}
	searchStr = searchStr + "&u=" + pathname;
	searchStr = searchStr + "&ll=" + logLevel;
	if (typeof ed !== SN_CONSTANTS.UNDEFINED_STR && ed != null && ed != "") {
	    searchStr = searchStr + "&ed=" + ed;
	}
	if (searchStr.length > 2000) {
	    searchStr = searchStr.substr(0, 2000);
	}
	pspTrack.id = "track-js" + ts;
	pspTrack.src = document.location.protocol + "//" + root + "/psp/" + key + "/" + SN.Conf.CONST_PSP_VERSION + "/cpxt.js?" + searchStr;
	var head = document.getElementsByTagName('head').item(0);
	void (head.appendChild(pspTrack));
    } catch (err) {
	if (typeof console != undefined) {
	    SN.Logger.consoleLog("Error while sending custom tracking data", err);
	}
    }
};

var JSON_247 = (function() {

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { // table
	// of
	// character
	// substitutions
	'\b' : '\\b',
	'\t' : '\\t',
	'\n' : '\\n',
	'\f' : '\\f',
	'\r' : '\\r',
	'"' : '\\"',
	'\\' : '\\\\'
    }, rep;

    function quote(string) {
	escapable.lastIndex = 0;
	return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
	    var c = meta[a];
	    return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	}) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
	var i, // The loop counter.
	k, // The member key.
	v, // The member value.
	length, mind = gap, partial, value = holder[key];

	if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
	    value = value.toJSON(key);
	}
	if (typeof rep === 'function') {
	    value = rep.call(holder, key, value);
	}
	switch (typeof value) {
	case 'string':
	    return quote(value);

	case 'number':
	    return isFinite(value) ? String(value) : 'null';

	case 'boolean':
	case 'null':
	    return String(value);
	case 'object':
	    if (!value) {
		return 'null';
	    }
	    gap += indent;
	    partial = [];
	    if (Object.prototype.toString.apply(value) === '[object Array]') {
		length = value.length;
		for (i = 0; i < length; i += 1) {
		    partial[i] = str(i, value) || 'null';
		}
		v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
		gap = mind;
		return v;
	    }
	    if (rep && typeof rep === 'object') {
		length = rep.length;
		for (i = 0; i < length; i += 1) {
		    k = rep[i];
		    if (typeof k === 'string') {
			v = str(k, value);
			if (v) {
			    partial.push(quote(k) + (gap ? ': ' : ':') + v);
			}
		    }
		}
	    } else {
		for (k in value) {
		    if (Object.prototype.hasOwnProperty.call(value, k)) {
			v = str(k, value);
			if (v) {
			    partial.push(quote(k) + (gap ? ': ' : ':') + v);
			}
		    }
		}
	    }
	    v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
	    gap = mind;
	    return v;
	}
    }

    function stringify(value, replacer, space) {
	var i;
	gap = '';
	indent = '';
	if (typeof space === 'number') {
	    for (i = 0; i < space; i += 1) {
		indent += ' ';
	    }
	} else if (typeof space === 'string') {
	    indent = space;
	}
	rep = replacer;
	if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
	    throw new Error('JSON_247.stringify');
	}
	return str('', {
	    '' : value
	});
    }

    function parse(text, reviver) {
	var j;

	function walk(holder, key) {
	    var k, v, value = holder[key];
	    if (value && typeof value === 'object') {
		for (k in value) {
		    if (Object.prototype.hasOwnProperty.call(value, k)) {
			v = walk(value, k);
			if (v !== undefined) {
			    value[k] = v;
			} else {
			    delete value[k];
			}
		    }
		}
	    }
	    return reviver.call(holder, key, value);
	}
	text = String(text);
	cx.lastIndex = 0;
	if (cx.test(text)) {
	    text = text.replace(cx, function(a) {
		return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    });
	}
	if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(
		/(?:^|:|,)(?:\s*\[)+/g, ''))) {
	    j = eval('(' + text + ')');
	    return typeof reviver === 'function' ? walk({
		'' : j
	    }, '') : j;
	}
	throw new SyntaxError('JSON_247.parse');
    }
    var me = {
	parse : parse,
	stringify : stringify
    };
    return me;
})();

SN.Logger = (function() {
    /*
     * a flag added to control logging.by default logging is off.
     */
     var SN_CONSTANTS = SN.Constants;
    var shouldLog = false;
    function consoleLog(message) {
	if (!shouldLog) {
	    return;
	}
	if (typeof console != SN_CONSTANTS.UNDEFINED_STR) {
	    console.log(message);
	}
    }
    var me = {
	consoleLog : consoleLog
    };
    return me;
}());

SN.CookieManager = (function() {
	var KEY_SEPERATOR = '~';
    var KEY_VALUE_SEPERATOR = '||';
    var PAGE_VISIT_SEQUENCE_TO_UPDATE = "p";
    var SN_WEBTRACKER_COOKIE_NAME = "sn.wt";

    function readSNCookie(snCookieName, key) {
	var value = unescape(readCookie(snCookieName));
	if (key == null) {
	    return value;
	}
	if (value == null) {
	    return null;
	}
	var keyValuePairs = value.split(KEY_SEPERATOR);
	var keyHash = key + KEY_VALUE_SEPERATOR;
	for ( var j = 0; j < keyValuePairs.length; j++) {
	    var keyValuePair = keyValuePairs[j];
	    if (keyValuePair.indexOf(keyHash) == 0) {
		var keyValue = keyValuePair.substring(keyHash.length, keyValuePair.length);
		return keyValue;
	    }
	}
	return null;
    }

    
    function createSNCookieForMap(cookieName,keyValuePairs) {
	try {
	    var snCookieValue = readCookie(cookieName);
	    var isFirst = true;
	    if (typeof snCookieValue == undefined || snCookieValue == null) {
		snCookieValue = "";
	    } else {
		isFirst = false;
	    }

	    var valueList = "";
	    var options = new Object();
	    for ( var key in keyValuePairs) {
		if (isFirst) {
		    isFirst = false;
		} else {
		    valueList += KEY_SEPERATOR;
		}
		valueList += (key + KEY_VALUE_SEPERATOR + keyValuePairs[key]);
	    }
	    snCookieValue = snCookieValue + valueList;
	    eraseCookie(cookieName);

	    // Adding the domain to the cookie such that it is accesable in
	    // subdomains.
	    if (SN.Conf.COOKIEPATH != null && SN.Conf.COOKIEPATH.length > 0) {
		for ( var i = 0; i < SN.Conf.COOKIEPATH.length; i++) {
		    var path = "." + SN.Conf.COOKIEPATH[i];

		    if (document.domain == SN.Conf.COOKIEPATH[i] || isSubDomain(document.domain, path)) {
			options.domain = path;
		    }
		}
	    }

	    if (typeof options.domain == undefined || options.domain == null) {
		options.domain = "." + document.domain;
	    }
	    createCookie(cookieName, snCookieValue, options);
	} catch (err) {
	    SN.Logger.consoleLog("Error while creating SNCookie :", err);
	}
    }
    function createSNCookie(snCookieName, key, value, lifeTime) {
	var beforeKey = "";
	var afterKey = "";
	var isKeyFound = false;
	var isFirst = true;
	var snCookieValue = readCookie(snCookieName);
	if (snCookieValue == null) {
	    snCookieValue = "";
	}
	var keyValuePairs = snCookieValue.split(KEY_SEPERATOR);
	var keyHash = key + KEY_VALUE_SEPERATOR;
	for ( var j = 0; j < keyValuePairs.length; j++) {
	    var keyValuePair = keyValuePairs[j];
	    if (keyValuePair == "") {
		continue;
	    }
	    if (keyValuePair.indexOf(keyHash) == 0) {
		isKeyFound = true;
	    } else {
		if (isKeyFound) {
		    afterKey = afterKey + KEY_SEPERATOR + keyValuePair;
		} else {
		    if (isFirst) {
			beforeKey = keyValuePair;
			isFirst = false;
		    } else {
			beforeKey = beforeKey + KEY_SEPERATOR + keyValuePair;
		    }
		}
	    }
	}
	var snCookieValueNew = "";
	if (value == null) {
	    snCookieValueNew = beforeKey + afterKey;
	} else {
	    if (beforeKey == "") {
		snCookieValueNew = keyHash + value + afterKey;
	    } else {
		snCookieValueNew = beforeKey + KEY_SEPERATOR + keyHash + value + afterKey;
	    }
	}
	var options = {};
	if (!SN.Utils.undefinedOrNull(lifeTime)) {
	    options.time = lifeTime;
	}
	// Adding the domain to the cookie such that it is accesable in
	// subdomains.
	if (SN.Conf.COOKIEPATH != null && SN.Conf.COOKIEPATH.length > 0) {
	    for ( var i = 0; i < SN.Conf.COOKIEPATH.length; i++) {
		var path = "." + SN.Conf.COOKIEPATH[i];

		if (document.domain == SN.Conf.COOKIEPATH[i] || isSubDomain(document.domain, path)) {
		    options.domain = path;
		}
	    }
	}
	if (SN.Utils.undefinedOrNull(options.domain)) {
	    options.domain = "." + document.domain;
	}
	createCookie(snCookieName, snCookieValueNew, options);
    }

    function createCookie(name, value, options) {
	if (options == null) {
	    options = {};
	}
	var result = [];
	result.push(augmentKeyValuePair(name, value));
	if (!(options.time == null)) {
	    var date = new Date();
	    date.setTime(date.getTime() + options.time);
	    result.push(augmentKeyValuePair("expires", date.toGMTString()));
	}
	if (options.path == null) {
	    options.path = "/";
	}
	result.push(augmentKeyValuePair("path", options.path));
	if (!(options.domain == null)) {
	    result.push(augmentKeyValuePair("domain", options.domain));
	}
	document.cookie = result.join("; ");
    }

    function readCookie() {
    var cookiesList = [];
    var cookieValue = "";
    for (var k = 0; k < arguments.length; k++)
       	cookiesList[k] = arguments[k] + '=';
    
	var ca = document.cookie.split(';');
	for ( var i = 0; i < ca.length; i++) {
	    var c = ca[i];
	    while (c.charAt(0) == ' ') {
		c = c.substring(1, c.length);
	    }
	    for( k = 0; k < cookiesList.length; k++) {
		    if (c.indexOf(cookiesList[k]) == 0) {
			cookieValue += c.substring(cookiesList[k].length, c.length);
		    }
		}
	}
	return cookieValue;
    }

    function isSubDomain(currentDomain, subDomain) {
	var pos = currentDomain.indexOf(subDomain);
	if (pos >= 0 && pos + subDomain.length == currentDomain.length) {
	    return true;
	}
	return false;
    }

    function augmentKeyValuePair(key, value) {
	var result = [];
	result.push(key);
	result.push("=");
	result.push(value);
	return result.join("");
    }


    function eraseCookie(name) {
        var options = {};
        options.time = -(24 * 60 * 60 * 1000);
        options.domain = "." + document.domain;
        createCookie(name, "", options);
    }
    
    
    function getUrlVisitSeq(){    	
    	var urlVisitSeq = readSNCookie(SN_WEBTRACKER_COOKIE_NAME, PAGE_VISIT_SEQUENCE_TO_UPDATE);
        return urlVisitSeq;
    }
    
    return {
	createSNCookie : createSNCookie,
	readSNCookie : readSNCookie,
	readCookie : readCookie,
	eraseCookie : eraseCookie,
	createSNCookieForMap : createSNCookieForMap,
	getUrlVisitSeq : getUrlVisitSeq,
	createCookie : createCookie
    };
}());
//check to see whether sn.vi does not exist and atleast one of the other cookies do
(function checkForViCookie(){ 
    var SN_CONSTANTS = SN.Constants;
    var cookieString = document.cookie; 
    if((cookieString.indexOf(SN_CONSTANTS.SN_VI_COOKIE_NAME) == -1) &&
        ((cookieString.indexOf(SN_CONSTANTS.SN_BS_COOKIE_NAME) != -1)||(cookieString.indexOf(SN_CONSTANTS.SN_AS_COOKIE_NAME) != -1)||
         (cookieString.indexOf(SN_CONSTANTS.SN_RN_COOKIE_NAME) != -1)||(cookieString.indexOf(SN_CONSTANTS.SN_WEBTRACKER_COOKIE_NAME) != -1)||
         (cookieString.indexOf(SN_CONSTANTS.SN_WINDOW_SESSION_COOKIE_NAME) != -1))) {
            if(SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_BS_COOKIE_NAME, "d") == "a") {
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_BS_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_AS_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_RN_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_UI_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_WEBTRACKER_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_WINDOW_SESSION_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_EXIT_HISTORY_COOKIE_NAME);
            	SN.CookieManager.eraseCookie(SN_CONSTANTS.SN_VARIABLE_COOKIE_NAME);
            	
            	SN.loadTrackingScript("DataCleanedSinceViCookieExpired", "", "", SN.Conf.CUSTOM_TRACK_SERVER, SN.Conf.CONST_PSP_KEY, SN_CONSTANTS.LOGLEVEL_INFO);
        }
    }
})();

(function replaceHashInCookies(){
	var SN_CONSTANTS = SN.Constants;
	var cookieList = [SN_CONSTANTS.SN_BS_COOKIE_NAME, SN_CONSTANTS.SN_AS_COOKIE_NAME, SN_CONSTANTS.SN_RN_COOKIE_NAME, SN_CONSTANTS.SN_UI_COOKIE_NAME, SN_CONSTANTS.SN_WEBTRACKER_COOKIE_NAME, SN_CONSTANTS.SN_WINDOW_SESSION_COOKIE_NAME, SN_CONSTANTS.SN_EXIT_HISTORY_COOKIE_NAME, SN_CONSTANTS.SN_VARIABLE_COOKIE_NAME, SN_CONSTANTS.SN_VISITOR_COOKIE_NAME];
	for(var count=0; count < cookieList.length; count++){
		var	cookieData = SN.CookieManager.readCookie(cookieList[count]);
		
		if(!SN.Utils.undefinedOrNull(cookieData) && cookieData.search(SN_CONSTANTS.KEY_VALUE_SEPERATOR_OLD) >= 0){
			cookieData = cookieData.replace(/#/g, '||');
			SN.CookieManager.eraseCookie(cookieList[count]);
			options = {};
			options.time = 86400000;
			options.domain = '.' + document.domain;
			SN.CookieManager.createCookie(cookieList[count], cookieData, options);
			}
	}
})();

SN.Tracker = (function() {
	var SN_CONSTANTS = SN.Constants;
	var uAParser = SN.UserAgentParser;
    var fsmMap = SN.Conf.FSM;
 
    var ed = SN.Conf.ED;
    var CONST_REQUEST_ID = "r";
    var CONST_TRACKING_DATA = "d";
    var CONST_IE = "MSIE";
    var CONST_SAFARI = "Safari";
    var CONST_RETRY_COUNT = "retryCount";
    var CONST_REQUEST_TIME = "requestTime";
    var CONST_REQUEST_PARAM = "requestParam";
    var CONST_TRACKING_SECURED = "trackingSecured";
    var eventStorage = {};
    var pspVersion = SN.Conf.CONST_PSP_VERSION;
    var CONST_POLLING_TIME_INTERVAL = 3000;
    var MAX_RETRY_COUNT = 3;
    var CONST_TIME_OUT = 2000;
    var tseq = -1;
    var sseq = -1;
    var uniquePageId = new Date().getTime();
    var vi;
    var bsid;
    var MAX_URL_SIZE;
    var statusTracker;
    var status = {};
    var vg;
    var tp;
    var ti;
    var rt;
    var rv;

    function poll() {
	sendAll();
    }

    function saveOnExit(arg) {
	try {
	    var jsonEventStorage = JSON_247.stringify(eventStorage);
	    sessionStorage.setItem("sn.tdata", jsonEventStorage);
	} catch (err) {
	    SN.Logger.consoleLog("SN.Tracker:Error storing event data",err);
	}
    }

    function init() {
	if (isIE() || isSafari()) {
	    MAX_URL_SIZE = 1000;
	    SN.Logger.consoleLog("SN.Tracker: browser type IE , setting url size to 2k");
	} else {
	    MAX_URL_SIZE = 1700;
	    SN.Logger.consoleLog("SN.Tracker: browser type is not IE , setting url size to 4k");
	}
	setInterval(poll, CONST_POLLING_TIME_INTERVAL);

	if ((typeof sessionStorage == SN_CONSTANTS.UNDEFINED_STR) || (SN.Utils.undefinedOrNull(sessionStorage))) {
	    return;
	}
	
	
	try {
		if (window.addEventListener){
			window.addEventListener("unload", saveOnExit, false);			
		}
        else if (document.addEventListener){
			document.addEventListener("unload", saveOnExit, false);
		}
        else if (window.attachEvent){
			window.attachEvent("onunload",saveOnExit); 
		}
	    var oldEventData = eval('(' + sessionStorage.getItem("sn.tdata") + ')');
	    copyParams(oldEventData, eventStorage);
	    sendAll();
	} catch (err) {
	    SN.Logger.consoleLog("SN.Tracker:Error in accessing old session data", err);
	}
	
	
	
    }

    function sendAll() {
	for ( var source_reqId in eventStorage) {
	    var requestObj = eventStorage[source_reqId];
	    var trackingSecured;
	    if (requestObj[CONST_RETRY_COUNT] < MAX_RETRY_COUNT) {
		if ((new Date().getTime()) - requestObj[CONST_REQUEST_TIME] > CONST_TIME_OUT) {
		    requestObj[CONST_REQUEST_TIME] = new Date().getTime();
		    requestObj[CONST_RETRY_COUNT] = requestObj[CONST_RETRY_COUNT] + 1;
		    SN.Logger.consoleLog("SN.Tracker:Retrying It, retry count =" + requestObj[CONST_RETRY_COUNT] + ", request id =" + source_reqId);
		    trackingSecured = requestObj[CONST_TRACKING_SECURED];
		    makeTrackingCall(getDefaultUrl(trackingSecured), requestObj[CONST_REQUEST_PARAM]);
		}
	    } else {
		SN.Logger.consoleLog("SN.Tracker:Removing event data , retry count =" + requestObj[CONST_RETRY_COUNT] + ", request id :" + source_reqId);
		delete eventStorage[source_reqId];
		updateStatus(source_reqId, "FAILED");
	    }
	}

    }

    function makeTrackingCall(url, params) {
	sseq++;
	var scriptId = "pt" + sseq;
	var head = document.getElementsByTagName('head').item(0);
	var pspTrack = document.createElement('script');
	pspTrack.type = 'text/javascript';
	pspTrack.id = scriptId;
	pspTrack.src = appendUrlParams(url, scriptId, params);
	pspTrack.async = true;
	void (head.appendChild(pspTrack));
    }

    function processResponse(res) {
	SN.Logger.consoleLog("SN.Tracker: Processing response");
	if (!SN.Utils.undefinedOrNull(res.code)) {
	    SN.Logger.consoleLog("SN.Tracker: Got error response for r=" + res.r + " with error code= " + res.code);
	    if (!SN.Utils.undefinedOrNull(eventStorage[res.r])) {
		delete eventStorage[res.r];
		updateStatus(res.r, "FAILED");
	    }
	}
	if (!SN.Utils.undefinedOrNull(eventStorage[res.r])) {
	    SN.Logger.consoleLog("SN.Tracker: Got success response for req =" + res.r + " ,  removing it");
	    delete eventStorage[res.r];
	    updateStatus(res.r);
	} else {
	    SN.Logger.consoleLog("SN.Tracker: Got success response for req =" + res.r + " , but the response is already processed , so ignoring it");
	}
    }

    function removeElement(oldId) {
	var old = document.getElementById(oldId);
	if (old) {
	    var head = document.getElementsByTagName('head').item(0);
	    setTimeout(function() {
		try {
		    head.removeChild(old);
		} catch (err) {
		    SN.Logger.consoleLog('Could not remove pxt.js in 247px.js.', err);
		}
	    }, 2000);
	}
    }



    function getSessionData() {
	var activeSessionId;
	var activeSessionPresent;
	var sessionData = {};
	if (SN.Utils.undefinedOrNull(vi)) {
	vi = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_VI_COOKIE_NAME, "vi");
	}
	sessionData.vi = vi;
	var scope = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_VI_COOKIE_NAME, "sp");
	var cookieName = SN_CONSTANTS.SN_AS_COOKIE_NAME;
	if (scope == "bs") {
	    cookieName = SN_CONSTANTS.SN_BS_COOKIE_NAME;
	}
	if(SN.Utils.undefinedOrNull(vg)||SN.Utils.undefinedOrNull(tp)||SN.Utils.undefinedOrNull(ti)||SN.Utils.undefinedOrNull(rt)||SN.Utils.undefinedOrNull(rv)){	
		vg = SN.CookieManager.readSNCookie(cookieName, "vg");

		ti = SN.CookieManager.readSNCookie(cookieName, "ti");

		tp = SN.CookieManager.readSNCookie(cookieName, "tp");

		rt = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_RN_COOKIE_NAME, "rt");
		rv = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_RN_COOKIE_NAME, "rv");
	}
	sessionData.vg = vg;

	sessionData.ti = ti;

	sessionData.tp = tp;

	sessionData.rt = rt;
	sessionData.rv = rv;

	activeSessionPresent = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_AS_COOKIE_NAME, "a");
	activeSessionId = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_VI_COOKIE_NAME, "as");

	if (!SN.Utils.undefinedOrNull(activeSessionId)) {
	    if (!(activeSessionPresent == "t")) {
		sessionData.as = parseInt(activeSessionId) + 1;
		}
		else{
		sessionData.as = activeSessionId;
	    }

	}

	sessionData.v = SN.Conf.CONST_PSP_VERSION;

	if (SN.Utils.undefinedOrNull(bsid)) {
	    bsid = getBSID();
	}
	sessionData.bsid = bsid;
	sessionData.up = getUniquePageId();
	var liots = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_VI_COOKIE_NAME, "it");
	if (liots == null)
	    liots = 0;
	sessionData.it = liots;
	tseq++;
	sessionData.tseq = tseq;
	return sessionData;

    }

 

    function createMetaData() {
	var metadata = {};
	metadata.key = SN.Conf.CONST_PSP_KEY;
	return metadata;
    }

    function constructAndMakeTrackingCall(metaData, eventData, callBack, trackingSecured) {
	if (!SN.Utils.undefinedOrNull(callBack)) {
	    statusTracker = callBack;
	}
	if(SN.Utils.undefinedOrNull(metaData)){
	    metaData = createMetaData();
	}
	var url = getDefaultUrl(trackingSecured);
	var sessionData = getSessionData();
	eventData.vp = SN.Conf.PXOE_VERSION;
	eventData.vt = SN.Conf.TRACKING_VERSION;
	copyParams(sessionData, eventData);
	
	
	if(SN.Utils.undefinedOrNull(eventData.f)) {
		eventData.f ={};
	}
	if(SN.Utils.undefinedOrNull(eventData.f.v)) {
		eventData.f.v ={};
	}
	
	// sending browser details 
	eventData.f.v.br = uAParser.getBrowserDetails();
	//device Details and os details
	eventData.f.v.dd =  uAParser.getDeviceDetails();
	//timezone
	{	
		currDate = new Date();		//local variable.
		eventData.f.v.tz = currDate.getTimezoneOffset();
	}
	
	var requestId = getUniqueId();
	var trackingDatas = createTrackingData(eventData);
	var noOfTrackingDataParts = trackingDatas.length;
	status[requestId] = noOfTrackingDataParts;
	var sequenceId = 1;
	while (trackingDatas.length > 0) {
	    var requestParam = {};
	    requestParam[CONST_REQUEST_ID] = requestId + "-" + noOfTrackingDataParts + "-" + sequenceId;
	    sequenceId++;
	    try {
		copyParams(metaData, requestParam);
		requestParam[CONST_TRACKING_DATA] = trackingDatas.shift();
		save(requestParam, trackingSecured);
		SN.Logger.consoleLog("SN.Tracker: Got an event, assigning request id = " + requestParam[CONST_REQUEST_ID]);
		makeTrackingCall(url, requestParam);
	    } catch (err) {
		SN.Logger.consoleLog("SN.Tracker:Exception while sending event data. request id:" + requestParam[CONST_REQUEST_ID], err);
	    }
	}
	return requestId;
    }

    function save(requestParam, trackingSecured) {
	var requestObj = {};
	requestObj[CONST_REQUEST_PARAM] = requestParam;
	requestObj[CONST_REQUEST_TIME] = new Date().getTime();
	requestObj[CONST_RETRY_COUNT] = 1;
	requestObj[CONST_TRACKING_SECURED] = trackingSecured;
	eventStorage[requestParam[CONST_REQUEST_ID]] = requestObj;
	SN.Logger.consoleLog("SN.Tracker: Successfully saved the request, req id = " + requestParam[CONST_REQUEST_ID]);
    }

    function getDefaultUrl(trackingSecured) {
	if (!SN.Utils.undefinedOrNull(trackingSecured) && trackingSecured) {
	    return "https:" + "//" + SN.Conf.PSP_ROOT + "/psp/" + SN.Conf.CONST_PSP_KEY + "/" + SN.Conf.CONST_PSP_VERSION + "/pxt.js?";
	}
	return document.location.protocol + "//" + SN.Conf.PSP_ROOT + "/psp/" + SN.Conf.CONST_PSP_KEY + "/" + SN.Conf.CONST_PSP_VERSION + "/pxt.js?";
    }

    function createTrackingData(eventData) {
	var trackingData = {};
	trackingData.e = eventData;
	var trackigDataJSON = JSON_247.stringify(trackingData);
	var trackingDatas = [];
	for ( var i = 0; i < trackigDataJSON.length; i = i + MAX_URL_SIZE) {
	    var end = i + MAX_URL_SIZE;
	    if (trackigDataJSON.length <= i + MAX_URL_SIZE) {
		end = trackigDataJSON.length;
	    }
	    trackingDatas.push(trackigDataJSON.substring(i, end));
	}
	return trackingDatas;
    }

    function isIE() {
	if (navigator.userAgent.indexOf(CONST_IE) != -1)
	    return true;
	return false;
    }

    function isSafari() {
	if (navigator.userAgent.indexOf(CONST_SAFARI) != -1)
	    return true;
	return false;
    }

    function evaluate(inputExp) {
	var result = {};
	for ( var property in inputExp) {
	    try {
		var value = eval(inputExp[property]);
		if ((value != null) && (value != SN_CONSTANTS.UNDEFINED_STR) && (value != 'null')) {
		    result[property] = eval(inputExp[property]);
		}
	    } catch (err) {
		SN.Logger.consoleLog("PS: error in getting value for: " + property, err);
	    }
	}
	return result;
    }

    function getBSID() {
    var SN_CONSTANTS = SN.Constants;
	var bsid;
	try {
	    bsid = SN.CookieManager.readSNCookie(SN_CONSTANTS.SN_BS_COOKIE_NAME, "bsid");
	    if (SN.Utils.undefinedOrNull(bsid)) {
		bsid = getUniqueId();
		SN.Logger.consoleLog("Creating new BSID: value = " + bsid);
		SN.CookieManager.createSNCookie(SN_CONSTANTS.SN_BS_COOKIE_NAME, "bsid", bsid);
	    }
	} catch (err) {
	    SN.Logger.consoleLog("BSID Cookie read/write failed", err);
	}
	return bsid;

    }

    function getUniqueId() {
	return Math.random().toString().substring(2, 18) + "-" + new Date().getTime();
    }

    function getUniquePageId() {
	return uniquePageId;
    }

    function appendUrlParams(url, scriptId, params) {
	var appendAmpersand = (url.length > 0) && (url.charAt(url.length - 1) != '?');
	if (appendAmpersand == true) {
	    url += "&";
	} else {
	    appendAmpersand = true;
	}
	url += "sId=" + scriptId;
	for ( var property in params) {
	    if (appendAmpersand == true) {
		url += "&";
	    } else {
		appendAmpersand = true;
	    }
	    if (typeof params[property] === "object") {
		url += (property + "=" + encodeURIComponent(JSON_247.stringify(params[property])));
	    } else {
		url += (property + "=" + encodeURIComponent(params[property]));
	    }
	}
	return url;
    }


    function copyParams(source, destination) {
	if (SN.Utils.undefinedOrNull(source)) {
	    return;
	}
	for ( var key in source) {
	    if (!SN.Utils.undefinedOrNull(source[key])) {
		destination[key] = source[key];
	    }
	}
    }

    function retrieveEventRequestId(eventRequestId) {
	var requestIds = eventRequestId.split("-");
	return requestIds[0] + "-" + requestIds[1];
    }

    function updateStatus(requestId, statusFlag) {
	try {
	    var eventRequestId = retrieveEventRequestId(requestId);
	    if (SN.Utils.undefinedOrNull(status[eventRequestId])) {
		return;
	    }
	    if (!SN.Utils.undefinedOrNull(statusFlag)) {
		if (!SN.Utils.undefinedOrNull(statusTracker)) {
		    statusTracker.call(this, eventRequestId, statusFlag);
		}
		delete status[eventRequestId];
		return;
	    }
	    status[eventRequestId] = status[eventRequestId] - 1;

	    if (status[eventRequestId] == 0) {
		if (!SN.Utils.undefinedOrNull(statusTracker)) {
		    statusTracker.call(this, eventRequestId, "SUCCESS");
		}
		delete status[eventRequestId];
	    }
	} catch (err) {
	    SN.Logger.consoleLog("SN.Tracker: Error while updating the status for request id =" + requestId, err);
	}

    }
    function setWowpxSessionData(visitorGroup,targetPopulation,targetId,uniquePageId,randomNumberForTargetPopulation,randomNumberForVisitorGroup){
    	if(!SN.Utils.undefinedOrNull(visitorGroup)&&!SN.Utils.undefinedOrNull(targetPopulation)&&!SN.Utils.undefinedOrNull(targetId)){    		
    		vg = visitorGroup;
    		tp = targetPopulation;
    		ti = targetId;
    	}
    	
    	if(!SN.Utils.undefinedOrNull(uniquePageId)){
    		uniquePageId = "wowpx_"+uniquePageId;
    	}
    	if(!SN.Utils.undefinedOrNull(randomNumberForTargetPopulation)&&!SN.Utils.undefinedOrNull(randomNumberForVisitorGroup)){
    		rt = randomNumberForTargetPopulation;
    		rv = randomNumberForVisitorGroup;
    	}
    }
    init();
    return {
	constructAndMakeTrackingCall : constructAndMakeTrackingCall,
	processResponse : processResponse,
	removeElement : removeElement,
	getUniquePageId : getUniquePageId,
	setWowpxSessionData : setWowpxSessionData
    };
}());
/*3. 247pxutils*/
/**
 * @identity 247pxutils
 * 
 */

if (typeof SN === "undefined") {
    SN = {};
}
SN.Utils = (function(){
    
    function undefinedOrNull(param) {
	    return ((param == "undefined") || (param == null) || (param === "null"));
    }
    
    var me = {
	    undefinedOrNull : undefinedOrNull   
    };
    
    return me;
    
}());/*4. wowpxappjs*/
/**
 * @identity wowpxappjs
 * @requires tracker, 247Conf, 247pxutils
 */

SN.Constants = (function() {
    var me = {
        /**
         * * constants to be used in loader
         **/
        UNDEFINED_STR : "undefined",
        SN_VI_COOKIE_NAME : "sn.vi",
        SN_RN_COOKIE_NAME : "sn.rn",
        SN_BS_COOKIE_NAME : "sn.bs",
        SN_AS_COOKIE_NAME : "sn.as",
        SN_WINDOW_SESSION_COOKIE_NAME : "sn.ws",
        WEBTRACKER_COOKIE_NAME : "sn.wt"
    };
    return me;
}());

var Logger = (function() {
    var consoleEnabled = (typeof (console) != "undefined");
    var isGecko = (/Gecko\/(\S+)/).test(navigator.userAgent);
    var LOGLVL_NONE = 1000;
    var LOGLVL_ERROR = 400;
    var LOGLVL_WARN = 300;
    var LOGLVL_INFO = 200;
    var LOGLVL_DEBUG = 100;
    var logLevel = window.__wowpx_loglvl || LOGLVL_NONE;

    function formatLogMsg(params) {
        var logs = [].slice.call(params, 0);
        for ( var i = 0; i < logs.length; i++) {
            var log = logs[i];
            if (log instanceof Array) {
                logs[i] = log.join(',');
            } else if (typeof log != 'string') {
                logs[i] = JSON.stringify(log);
            }
        }
        return logs.join(' ');
    }

    function warn() {
        try {
            if (!consoleEnabled || logLevel > LOGLVL_WARN) {
                return;
            }
            if (isGecko) {
                console.warn.apply(console, arguments);
            } else {
                console.warn(formatLogMsg(arguments));
            }
        } catch (e) {
        }
    }

    /**
     * Logs messages in console in <b>error</b> mode if the console is enabled
     * 
     * @param {String}
     *            message message to be logged
     */
    function error() {
        try {
            if (!consoleEnabled || logLevel > LOGLVL_ERROR) {
                return;
            }
            if (isGecko) {
                console.error.apply(console, arguments);
            } else {
                console.error(formatLogMsg(arguments));
            }
        } catch (e) {
        }
    }

    function debug() {
        try {
            if (!consoleEnabled || logLevel > LOGLVL_DEBUG) {
                return;
            }
            if (isGecko) {
                console.info.apply(console, arguments);
            } else {
                console.info(formatLogMsg(arguments));
            }
        } catch (e) {
        }
    }

    function info() {
        try {
            if (!consoleEnabled || logLevel > LOGLVL_INFO) {
                return;
            }
            if (isGecko) {
                console.debug.apply(console, arguments);
            } else {
                console.log(formatLogMsg(arguments));
            }
        } catch (e) {
        }
    }
    return {
        error : error,
        warn : warn,
        info : info,
        debug : debug
    };
})();

/**
 * http://www.quirksmode.org/js/cookies.html
 */
Cookie = (function() {
    function augmentKeyValuePair(key, value) {
        var result = [];
        result.push(key);
        result.push("=");
        result.push(value);
        return result.join("");
    }

    function createCookie(name, value, options) {
        if (SN.Utils.undefinedOrNull(options)) {
            options = {};
        }
        var result = [];
        result.push(augmentKeyValuePair(name, value));
        if (!SN.Utils.undefinedOrNull(options.time)) {
            var date = new Date();
            date.setTime(date.getTime() + options.time);
            result.push(augmentKeyValuePair("expires", date.toGMTString()));
        }
        if (SN.Utils.undefinedOrNull(options.path)) {
            options.path = "/";
        }
        result.push(augmentKeyValuePair("path", options.path));
        if (!SN.Utils.undefinedOrNull(options.domain)) {
            result.push(augmentKeyValuePair("domain", options.domain));
        }
        document.cookie = result.join("; ");
    }

    function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for ( var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) == 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    }

    function eraseCookie(name) {
        var options = {};
        options.time = -1 * 24 * 60 * 60 * 1000;
        options.domain = document.domain;
        options.path = "/";
        createCookie(name, "", options);
    }

    return {
        createCookie : createCookie,
        readCookie : readCookie,
        eraseCookie : eraseCookie
    };
})();

ResourceUtils = (function() {

    function loadCss(url, id) {
        var cssElement = document.createElement("link");
        cssElement.di = id;
        cssElement.href = url;
        cssElement.rel = "stylesheet";
        cssElement.type = "text/css";
        document.getElementsByTagName("head")[0].appendChild(cssElement);
    }

    function loadJs(url, id) {
        var jsNode = document.createElement("script");
        jsNode.id = id;
        jsNode.src = url;
        jsNode.type = "text/javascript";
        document.getElementsByTagName("head")[0].appendChild(jsNode);
    }

    function loadJsInline(url, id) {
        var jsNode = document.createElement("script");
        jsNode.id = id;
        jsNode.src = url;
        jsNode.type = "text/javascript";
        document.body.appendChild(jsNode);
    }

    function loadIFrame(url, id, hidden) {
        var ifrm = document.createElement("iframe");
        ifrm.src = url;
        ifrm.id = id;
        if (hidden == true) {
            ifrm.hidden = true;
        }
        return document.body.appendChild(ifrm);
    }

    function loadImg(url, id, hidden) {
        var img = document.createElement("img");
        img.src = url;
        img.id = id;
        if (hidden == true) {
            img.hidden = true;
        }
        document.body.appendChild(img);
    }

    return {
        loadCss : loadCss,
        loadIFrame : loadIFrame,
        loadImage : loadImg,
        loadJs : loadJs,
        loadJsInline : loadJsInline
    };
})();

PathUtils = (function() {
    function pathInSameOrigin(url) {
        var m = url.match(/^\s*https?:\/\/[^\/]*/);
        return !m || (m[0] == getOrigin());
    }

    function getOrigin() {
        var origin = location.protocol + "//" + document.domain;
        if (location.port) {
            origin += ":" + location.port;
        }
        return origin;
    }

    function getHostDomain() {
        var re = new RegExp("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");
        var domain = document.domain;
        if (domain.match(re)) {
            return domain;
        }
        var arr = domain.split('.');
        if (arr.length == 3) {
            return arr[1] + '.' + arr[2];
        } else if (arr.length > 3) {
            return arr[arr.length - 3] + '.' + arr[arr.length - 2] + '.' + arr[arr.length - 1];
        }
        return domain;
    }

    function toQueryString(params) {
        var result = "";
        var appendAmpersand = false;
        for ( var property in params) {
            if (appendAmpersand == true) {
                result += "&";
            } else {
                appendAmpersand = true;
            }
            if (typeof params[property] === "object") {
                result += (property + "=" + escape(JSON.stringify(params[property])));
            } else {
                result += (property + "=" + escape(params[property]));
            }
        }
        return result;
    }

    function appendUrlParams(url, params) {
        var isEmptyParams = true;
        for ( var key in params) {
            isEmptyParams = false;
            break;
        }
        if (isEmptyParams) {
            return url;
        }
        var indexOfQ = url.indexOf("?");
        if (indexOfQ >= 0) {
            if (indexOfQ == url.length - 1) {
                return url + toQueryString(params);
            } else {
                return url + "&" + toQueryString(params);
            }
        }
        return appendUrlParams(url + "?", params);
    }

    function getURLParams(url, urlseperator, paramseparator) {
        var params = {};
        var seperator = paramseparator || "&";
        var urlAndParamArr = url.split(urlseperator);
        if (urlAndParamArr.length < 2) {
            return params;
        }
        var urlParams = urlAndParamArr[1].split(seperator);

        for ( var i = 0; i < urlParams.length; i++) {
            var keyValueArray = urlParams[i].split("=");
            params[keyValueArray[0]] = unescape(keyValueArray[1]);
        }
        return params;
    }

    return {
        getHostDomain : getHostDomain,
        getURLParams : getURLParams,
        appendUrlParams : appendUrlParams,
        toQueryString : toQueryString,
        pathInSameOrigin : pathInSameOrigin,
        getOrigin : getOrigin
    };
})();

var JSONP = (function() {
    var CALLBACK_TIMEOUT = 10000;
    var CLEANUP_TIMEOUT = 60000;
    var jsonPCallCount = 0;
    var callback = {};
    var timer = {};

    function clearCallback(index) {
        if (typeof callback["cb_" + index] === "function") {
            delete callback["cb_" + index];
        }
    }

    function delayedResponseHandler(data) {
        Logger.debug("delayed response received: ", data);
    }

    function createTimeoutHandler(index, error) {
        return function(data) {
            timer[index] = setTimeout(function() {
                clearCallback(index);
                removeScript(index);
            }, CLEANUP_TIMEOUT);
            Logger.debug("JSONP Request (", index, ") timed out!");
            callback["cb_" + index] = delayedResponseHandler;
            error({
                "statusCode" : 408,
                "errorMessage" : "Request Timeout"
            });
        };
    }

    function removeScript(index) {
        var id = "jsonp_call_" + index;
        var elem = document.getElementById(id);
        if (elem) {
            document.getElementsByTagName("head")[0].removeChild(elem);
        }
    }

    function createCallback(index, success, error) {
        return function(data) {
            if (timer[index] != null) {
                clearTimeout(timer[index]);
                timer[index] = null;
            }

            if (data.statusCode == 200) {
                success(data);
            } else {
                error(data);
            }

            setTimeout(function() {
                removeScript(index);
            }, 1);
        };
    }

    function makeRequest(url, options) {
        var timeout = parseInt(options.timeout) * 1000 || CALLBACK_TIMEOUT;
        // don't increment count until successful call
        var index = jsonPCallCount + 1;
        var success = options.onSuccess;
        var error = options.onFailure;

        var params = options.parameters || {};
        var callbackParam = options.callback || "_jsonp";
        params[callbackParam] = "JSONP.callback.cb_" + index;
        url = PathUtils.appendUrlParams(url, params);
        callback["cb_" + index] = createCallback(index, success, error);
        timer[index] = setTimeout(createTimeoutHandler(index, error), timeout);

        ResourceUtils.loadJs(url, "jsonp_call_" + ++jsonPCallCount);
    }

    return {
        makeRequest : makeRequest,
        callback : callback
    };
})();

var Ajax = (function() {
    var version = 0.1;
    function createRequest() {
        var request = false;
        try {
            request = new XMLHttpRequest();
        } catch (tryIE1) {
            try {
                request = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (tryIE2) {
                try {
                    request = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (failed) {
                    request = false;
                }
            }
        }
        return request;
    }

    function setRequestHeaders(request, options) {
        var headers = {
            'X-Requested-With' : 'WoWPxAjax',
            'X-Ajax-Version' : version,
            'Accept' : 'text/javascript, text/html, application/xml, text/xml, */*'
        };
        if (options.method == 'post') {
            headers['Content-type'] = options.contentType + (options.encoding ? '; charset=' + options.encoding : '');

            /*
             * Force "Connection: close" for older Mozilla browsers to work
             * around a bug where XMLHttpRequest sends an incorrect
             * Content-length header. See Mozilla Bugzilla #246651.
             */
            if (request.overrideMimeType && (navigator.userAgent.match(/Gecko\/(\d{4})/) || [ 0, 2005
            ])[1] < 2005) {
                headers['Connection'] = 'close';
            }

        }

        for ( var name in headers) {
            request.setRequestHeader(name, headers[name]);
        }
    }

    function makeRequest(url, options) {
        if (options.method == "jsonp") {
            JSONP.makeRequest(url, options);
            return;
        }

        var request = createRequest();
        if (!request) {
            throw "Your browser doesn't support Ajax";
        }

        var defaultOptions = {
            "method" : 'post',
            "contentType" : 'application/x-www-form-urlencoded',
            "asynchronous" : true,
            "encoding" : 'UTF-8',
            "parameters" : [],
            "postBody" : null,
            "onSuccess" : function() {
            },
            "onFailure" : function() {
            }
        };

        options = mixin(defaultOptions, options);
        configureRequest(request, options);

        var method = options.method;
        var parameters = options.parameters;
        if (method != "get" && method != "post") {
            parameters["_method"] = method;
            method = "post";
        }

        var body = options.postBody;
        if (method == "get") {
            url = PathUtils.appendUrlParams(url, parameters);
            body = null;
        } else if (method == "post" && body == null) {
            body = PathUtils.toQueryString(parameters);
        }

        request.open(method.toUpperCase(), url, options.asynchronous);
        setRequestHeaders(request, options);
        request.send(body);
    }

    function mixin(obj1, obj2) {
        for ( var prop in obj2) {
            obj1[prop] = obj2[prop];
        }
        return obj1;
    }

    function configureRequest(request, options) {
        request.onreadystatechange = function() {

            if (request.readyState === 4) {
                if (request.status === 200) {
                    options.onSuccess({
                        "responseText" : request.responseText,
                        "statusCode" : getStatus(request),
                        "responseHeaders" : getAllResponseHeaders(request)
                    });
                } else {
                    options.onFailure({
                        "errorMessage" : request.responseText,
                        "statusCode" : getStatus(request),
                        "responseHeaders" : getAllResponseHeaders(request)
                    });
                }
            }
        };
    }

    function getStatus(request) {
        try {
            return request.status || 0;
        } catch (e) {
            return 0;
        }
    }

    function getAllResponseHeaders(request) {
        try {
            return request.getAllResponseHeaders();
        } catch (err) {
            return null;
        }
    }

    return {
        makeRequest : makeRequest
    };
})();

Store = (function() {
    var STORE_PRE_SU_FIX = "SN";
    var IE_USER_DATA_PREFIX = STORE_PRE_SU_FIX + "_user_data";
    var SEARCH_ORDER = [ "localstorage", "cookie", "ie" ];

    var store = null;
    var type = null;

    var StorageEngines = {
            "cookie" : {
                size : 4000,
                lifetime : 365 * 24 * 60 * 60 * 1000,
                test : function() {
                    return navigator.cookieEnabled ? true : false;
                },
                init : function() {
                    var cookieStr = Cookie.readCookie(IE_USER_DATA_PREFIX);
                    if (cookieStr == "" || cookieStr == null) {
                        Cookie.createCookie(IE_USER_DATA_PREFIX, "{}", {'time' : this.lifetime});
                    }
                },
                get : function(rootKey, key) {
                    var value = JSON_247.parse(decodeURIComponent(Cookie.readCookie(IE_USER_DATA_PREFIX)));
                    return (typeof value == "object" && value[rootKey] && value[rootKey][key])?value[rootKey][key]:null;
                },
                set : function(rootKey, key, value) {
                    var cookieObj = JSON_247.parse(decodeURIComponent(Cookie.readCookie(IE_USER_DATA_PREFIX)));
                    if (typeof cookieObj != "object") {
                        cookieObj = {};
                    }
                    if (typeof cookieObj[rootKey] != "object") {
                        cookieObj[rootKey] = {};
                    }
                    cookieObj[rootKey][key] = value;
                    Cookie.createCookie(IE_USER_DATA_PREFIX, encodeURIComponent(JSON_247.stringify(cookieObj)), {'time' : this.lifetime});
                },
                remove : function(rootKey, key) {
                    this.set(rootKey, key, "");
                },
                clear : function(rootKey) {
                    var cookieObj = JSON_247.parse(decodeURIComponent(Cookie.readCookie(IE_USER_DATA_PREFIX)));
                    if (typeof cookieObj != "object") {
                        cookieObj = {};
                    }
                    if (typeof cookieObj[rootKey] == "object") {
                        cookieObj[rootKey] = {};
                        Cookie.createCookie(IE_USER_DATA_PREFIX, encodeURIComponent(JSON_247.stringify(cookieObj)), {'time' : this.lifetime});         
                    }
                },
                isReady : function() {
                    var cookieStr = Cookie.readCookie(IE_USER_DATA_PREFIX);
                    if (cookieStr != null && typeof cookieStr != "undefined"){
                        return true;
                    }
                    return false;
                }
            },
        "ie" : {
            test : function() {
                /**
                 * make sure we're dealing with IE (src:
                 * http://javariet.dk/shared/browser_dom.htm)
                 */
                return window.ActiveXObject ? true : false;
            },
            init : function() {
                var el = document.createElement('div');

                /* set element properties */
                el.id = IE_USER_DATA_PREFIX + "-div";
                /* el.style.display = 'none'; */
                el.addBehavior('#default#userData');

                /* append element to body */
                document.body.appendChild(el);
                this.el = el;
                this.el.load(IE_USER_DATA_PREFIX);
            },
            key : function(rootKey, key) {
                return encodeURIComponent(rootKey) + encodeURIComponent(key);
            },
            get : function(rootKey, key) {
                return this.el.getAttribute(this.key(rootKey, key));
            },
            set : function(rootKey, key, value) {
                var storeKey = this.key(rootKey, key);
                this.el.setAttribute(storeKey, value);
                this.el.save(IE_USER_DATA_PREFIX);
                return value;
            },
            remove : function(rootKey, key) {
                var storeKey = this.key(rootKey, key);
                var value = this.el.removeAttribute(storeKey);
                this.el.save(IE_USER_DATA_PREFIX);
                return value;
            },
            clear : function(rootKey) {
                var prefix = encodeURIComponent(rootKey);
                var storage_element = this.el;
                var doc = storage_element.xmlDocument;
                var attributes = doc.firstChild.attributes;
                var len = attributes.length;
                while (len > 0) {
                    var attr = attributes[--len];
                    var key = attr.nodeName;
                    if (key.indexOf(prefix) == 0) {
                        storage_element.removeAttribute(key);
                    }
                }
                storage_element.save(IE_USER_DATA_PREFIX);
            },
            isReady : function() {
                return typeof (this.el) != "undefined" && this.el != null;
            }
        },
        "localstorage" : {
            test : function() {
                return window.localStorage ? true : false;
            },
            init : function() {
                this.store = window.localStorage;
            },
            key : function(rootKey, key) {
                return encodeURIComponent(rootKey) + encodeURIComponent(key);
            },
            get : function(rootKey, key) {
                return this.store.getItem(this.key(rootKey, key));
            },
            set : function(rootKey, key, value) {
                return this.store.setItem(this.key(rootKey, key), value);
            },
            remove : function(rootKey, key) {
                return this.store.removeItem(this.key(rootKey, key));
            },
            clear : function(rootKey) {
                var prefix = encodeURIComponent(rootKey);
                for ( var i = 0; i < localStorage.length; i++) {
                    var key = localStorage.key(i);
                    if (key.indexOf(prefix) == 0) {
                        localStorage.removeItem(key);
                        i--;
                    }
                }
            },
            isReady : function() {
                return this.store != null;
            }
        }
    };

    function init() {
        var enginesCount = SEARCH_ORDER.length;
        for ( var i = 0; i < enginesCount; i++) {
            var engine = SEARCH_ORDER[i];
            var storageEngine = StorageEngines[engine];
            if (storageEngine.test()) {
                store = storageEngine;
                type = engine;
                break;
            }
        }

        /**
         * store couldnot be obtained, so, we may retry to obtain the store.
         */
        if (store == null) {
            Logger.error("No client side store could be obtained for your browser. Upgrade yours to FF2+/IE8+");
        } else {
            /**
             * store is initialized. no need to retry further.
             */
            store.init();
        }
    }

    function isValidKey(key) {
        /**
         * TODO: put some restrictions on special characters here
         */
        if (false) {
            throw "Invalid key. Special characters not allowed in keys";
        }
        return key;
    }

    function isReady() {
        if (SN.Utils.undefinedOrNull(store)) {
            return false;
        }

        return store.isReady();
    }

    function getStore(storeId) {
        if (SN.Utils.undefinedOrNull(storeId)) {
            throw "Invalid store id";
        }
        return new StoreWrapperObj(storeId);
    }

    function getType() {
        return type;
    }
    var StoreWrapperObj = function(storeId) {
        var rootKey = STORE_PRE_SU_FIX + storeId + STORE_PRE_SU_FIX;

        this.get = function(key) {
            return store.get(rootKey, key);
        };
        this.set = function(key, value) {
            return store.set(rootKey, key, value);
        };
        this.remove = function(key) {
            return store.remove(rootKey, key);
        };
        this.clear = function() {
            store.clear(rootKey);
        };
    };

    var me = {
        isReady : isReady,
        getStore : getStore,
        getType : getType,
        reinit : init
    };

    init();
    return me;
})();

WOWPx = (function() {
    var urlParams = parseParams();
    var customParams = JSON_247.parse(urlParams.params || "{}");
    urlParams.params = customParams;

    var type = urlParams.src;
    try {
        var pxoeWinRef = getPxOEWindowReference(type);
        var pxoeDOMRef = pxoeWinRef.document;
        var myWoWPxRef = pxoeWinRef.__wowpx[urlParams.id];
    } catch (e) {
        Logger.info(e.message);
    }
    SN.Tracker.setWowpxSessionData(null, null, null, "wowpx_" + urlParams.up, null, null);

    var callbacks = {
        onMove : null,
        onHide : null,
        onShow : null,
        onClose : null,
        onStyle : null,
        onTrack : null,
        onContextChange : null
    };

    function getPxOEWindowReference(src) {
        // 0 means iframe, 1 means window
        if (src == 0) {
            var ifrm = top.document.getElementById("sn_iframe");
            var ifrmWin = (ifrm.contentWindow || ifrm.contentDocument);
            if (ifrmWin.document) {
                return ifrmWin;
            }
            return ifrmWin.getParentNode();
        } else if (src == 1) {
            return window.opener;
        }
        return null;
    }

    function getPxOEWindow() {
        return pxoeWinRef;
    }

    function getMyWoWPxRef() {
        return myWoWPxRef;
    }

    function getWoWPxParams() {
        return urlParams;
    }

    function configure(config) {
        for ( var cb in callbacks) {
            if (typeof config[cb] != "undefined") {
                callbacks[cb] = config[cb];
            }
        }
    }

    function track(eventData, cb, secure) {
        var data = {};
        Logger.debug(eventData);
        if (cb == null || typeof cb == "undefined") {
            cb = noOp;
        }
        var newcb = function () {
            setTimeout(cb, 10);
        }
        if (SN.Utils.undefinedOrNull(eventData.st)) {
            data.st = new Date().getTime();
        }
        if (eventData.eventId) {
            data.ec = eventData.eventId;
        }
        if (!SN.Utils.undefinedOrNull(eventData.data)) {
            if (!SN.Utils.undefinedOrNull(eventData.data.ed)) {
                data.ed = eventData.data.ed;
            }
            if (!SN.Utils.undefinedOrNull(eventData.data.f)) {
                data.f = eventData.data.f;
            }
        }
        data.bd = encodeURIComponent(navigator.userAgent);
        SN.Tracker.constructAndMakeTrackingCall(null, data, newcb, secure);
        if (callbacks.onTrack) {
            callbacks.onTrack(data);
        }
    }

    function noOp() {
    }

    function parseParams() {
        var url = document.location.href;
        var seperator;
        if (url.indexOf("?") > 0) {
            seperator = "?";
        } else if (url.indexOf("#") > 0) {
            seperator = "#";
        }
        return PathUtils.getURLParams(url, seperator);
    }

    function close() {
        if (myWoWPxRef != null) {
            myWoWPxRef.close();
        }
        if (callbacks.onClose) {
            callbacks.onClose();
        }
    }

    function style(styleObj) {
        if (myWoWPxRef != null) {
            myWoWPxRef.style(styleObj);
        }
        if (callbacks.onStyle) {
            callbacks.onStyle(styleObj);
        }
    }

    function move(x, y) {
        if (myWoWPxRef != null) {
            myWoWPxRef.move(x, y);
        }
        if (callbacks.onMove) {
            callbacks.onMove(x, y);
        }
    }

    function hide() {
        if (myWoWPxRef != null) {
            myWoWPxRef.hide();
        }
        if (callbacks.onHide) {
            callbacks.onHide();
        }
    }

    function show() {
        if (myWoWPxRef != null) {
            myWoWPxRef.show();
        }
        if (callbacks.onShow) {
            callbacks.onShow();
        }
    }

    function setContext(context) {
        for ( var c in context) {
            urlParams.params[c] = context[c];
        }
        if (callbacks.onContextChange) {
            callbacks.onContextChange(context);
        }
    }

    function getContext() {
        return urlParams.params;
    }

    parseParams();
    if (type == 1) {
        // window.onbeforeunload = close;
    }

    var me = {
        configure : configure,
        track : track,
        move : move,
        style : style,
        hide : hide,
        show : show,
        close : close,
        getPxOEWindow : getPxOEWindow,
        getMyWoWPxRef : getMyWoWPxRef,
        getWoWPxParams : getWoWPxParams,
        getContext : getContext,
        setContext : setContext
    };
    return me;
})();/*5. emilejs*/
/**
 * @identity emilejs
 */
 
/* emile.js (c) 2009 Thomas Fuchs
 * Licensed under the terms of the MIT license.
 */

(function(emile, container){
  var parseEl = document.createElement('div'),
    props = ('backgroundColor borderBottomColor borderBottomWidth borderLeftColor borderLeftWidth '+
    'borderRightColor borderRightWidth borderSpacing borderTopColor borderTopWidth bottom color fontSize '+
    'fontWeight height left letterSpacing lineHeight marginBottom marginLeft marginRight marginTop maxHeight '+
    'maxWidth minHeight minWidth opacity outlineColor outlineOffset outlineWidth paddingBottom paddingLeft '+
    'paddingRight paddingTop right textIndent top width wordSpacing zIndex').split(' ');

  function interpolate(source,target,pos){ return (source+(target-source)*pos).toFixed(3); }
  function s(str, p, c){ return str.substr(p,c||1); }
  function color(source,target,pos){
    var i = 2, j, c, tmp, v = [], r = [];
    while(j=3,c=arguments[i-1],i--)
      if(s(c,0)=='r') { c = c.match(/\d+/g); while(j--) v.push(~~c[j]); } else {
        if(c.length==4) c='#'+s(c,1)+s(c,1)+s(c,2)+s(c,2)+s(c,3)+s(c,3);
        while(j--) v.push(parseInt(s(c,1+j*2,2), 16)); }
    while(j--) { tmp = ~~(v[j+3]+(v[j]-v[j+3])*pos); r.push(tmp<0?0:tmp>255?255:tmp); }
    return 'rgb('+r.join(',')+')';
  }
  
  function parse(prop){
    var p = parseFloat(prop), q = prop.replace(/^[\-\d\.]+/,'');
    return isNaN(p) ? { v: q, f: color, u: ''} : { v: p, f: interpolate, u: q };
  }
  
  function normalize(style){
    var css, rules = {}, i = props.length, v;
    parseEl.innerHTML = '<div style="'+style+'"></div>';
    css = parseEl.childNodes[0].style;
    while(i--) if(v = css[props[i]]) rules[props[i]] = parse(v);
    return rules;
  }  
  
  container[emile] = function(el, style, opts, after){
    el = typeof el == 'string' ? document.getElementById(el) : el;
    opts = opts || {};
    var target = normalize(style), comp = el.currentStyle ? el.currentStyle : getComputedStyle(el, null),
      prop, current = {}, start = +new Date, dur = opts.duration||200, finish = start+dur, interval,
      easing = opts.easing || function(pos){ return (-Math.cos(pos*Math.PI)/2) + 0.5; };
    for(prop in target) current[prop] = parse(comp[prop]);
    interval = setInterval(function(){
      var time = +new Date, pos = time>finish ? 1 : (time-start)/dur;
      for(prop in target)
        el.style[prop] = target[prop].f(current[prop].v,target[prop].v,easing(pos)) + target[prop].u;
      if(time>finish) { clearInterval(interval); opts.after && opts.after(); after && setTimeout(after,1); }
    },10);
  }
})('emile', this);/*6. jamljs*/
/**
 * @identity jamljs
 */
 
/**
 * @class Jaml
 * @author Ed Spencer (http://edspencer.net)
 * Jaml is a simple JavaScript library which makes HTML generation easy and pleasurable.
 * Examples: http://edspencer.github.com/jaml
 * Introduction: http://edspencer.net/2009/11/jaml-beautiful-html-generation-for-javascript.html
 */
Jaml = function() {
  return {
    templates: {},
        
    /**
     * Registers a template by name
     * @param {String} name The name of the template
     * @param {Function} template The template function
     */
    register: function(name, template) {
      this.templates[name] = template;
    },
    
    /**
     * Renders the given template name with an optional data object
     * @param {String} name The name of the template to render
     * @param {Object} thisObj Optional data object
     * @param {Object} data Optional data object
     */
    render: function(name, thisObj, data) {
      var template = this.templates[name],
          renderer = new Jaml.Template(template);
      return renderer.render.apply(renderer, Array.prototype.slice.call(arguments, 1));
    }
  };
}();

/**
 * @constructor
 * @param {String} tagName The tag name this node represents (e.g. 'p', 'div', etc)
 */
Jaml.Node = function(tagName) {
  /**
   * @property tagName
   * @type String
   * This node's current tag
   */
  this.tagName = tagName;
  
  /**
   * @property attributes
   * @type Object
   * Sets of attributes on this node (e.g. 'cls', 'id', etc)
   */
  this.attributes = {};
  
  /**
   * @property children
   * @type Array
   * Array of rendered child nodes that will be included as this node's innerHTML
   */
  this.children = [];
};

Jaml.Node.prototype = {
  /**
   * Adds attributes to this node
   * @param {Object} attrs Object containing key: value pairs of node attributes
   */
  setAttributes: function(attrs) {
    for (var key in attrs) {
      //convert cls to class
      var mappedKey = key == 'cls' ? 'class' : key;
      
      this.attributes[mappedKey] = attrs[key];
    }
    return this;
  },
  
  /**
   * Adds a child string to this node. This can be called as often as needed to add children to a node
   * @param {String} childText The text of the child node
   */
  addChild: function(childText) {
    this.children.push(childText);
    return this;
  },
  
  /**
   * Renders this node with its attributes and children
   * @param {Number} lpad Amount of whitespace to add to the left of the string (defaults to 0)
   * @return {String} The rendered node
   */
  render: function(lpad) {
    lpad = lpad || 0;
    
    var node      = [],
        attrs     = [],
        textnode  = (this instanceof Jaml.TextNode),
        multiline = this.multiLineTag();
    
    
    //add any left padding
    if (!textnode) node.push(this.getPadding(lpad));
    
    //open the tag
    node.push("<" + this.tagName);

    for (var key in this.attributes) {
      attrs.push(key + "=\"" + this.attributes[key] + "\"");
    }    
    attrs.sort()
    //add any tag attributes
    for (var i=0; i<attrs.length; i++) {
      node.push(" " + attrs[i]);
    }
    
    if (this.isSelfClosing() && this.children.length==0) {
      node.push("/>\n");
    } else {
      node.push(">");
      
      if (multiline) node.push("\n");
      
      this.renderChildren(node, this.children, lpad);
            
      if (multiline) node.push(this.getPadding(lpad));
      node.push("</", this.tagName, ">\n");
    }
    
    return node.join("");
  },

  /**
   * Renders an array of children
   * @node {Array} the current array of rendered lines
   * @children {Array} the child nodes to be rendered
   * @param {Number} lpad Amount of whitespace to add to the left of the string
   */
  renderChildren: function(node, children, lpad) {
    var childLpad = lpad + 2;
    
    for (var i=0; i < children.length; i++) {
      var child = children[i];
      if (child instanceof Array) {
        var nestedChildren = child;
        this.renderChildren(node, nestedChildren, lpad)
      } else {
        node.push(child.render(childLpad));
      }
    }    
  },
  
  /**
   * Returns true if this tag should be rendered with multiple newlines (e.g. if it contains child nodes)
   * @return {Boolean} True to render this tag as multi-line
   */
  multiLineTag: function() {
    var childLength = this.children.length,
        multiLine   = childLength > 0;
    
    if (childLength == 1 && this.children[0] instanceof Jaml.TextNode) multiLine = false;
    
    return multiLine;
  },
  
  /**
   * Returns a string with the given number of whitespace characters, suitable for padding
   * @param {Number} amount The number of whitespace characters to add
   * @return {String} A padding string
   */
  getPadding: function(amount) {
    return new Array(amount + 1).join(" ");
  },
  
  /**
   * Returns true if this tag should close itself (e.g. no </tag> element)
   * @return {Boolean} True if this tag should close itself
   */
  isSelfClosing: function() {
    for (var i = this.notSelfClosingTags.length - 1; i >= 0; i--) {
      if (this.tagName == this.notSelfClosingTags[i]) return false;
    }

    return true;
  },
  
  /**
   * @property selfClosingTags
   * @type Array
   * An array of all tags that should be self closing
   */
  notSelfClosingTags: ['textarea', 'script', 'em', 'strong', 'option', 'select']
};

Jaml.TextNode = function(text) {
  this.text = text;
};

Jaml.TextNode.prototype = {
  render: function() {
    return this.text;
  }
};

/**
 * Represents a single registered template. Templates consist of an arbitrary number
 * of trees (e.g. there may be more than a single root node), and are not compiled.
 * When a template is rendered its node structure is computed with any provided template
 * data, culminating in one or more root nodes.  The root node(s) are then joined together
 * and returned as a single output string.
 * 
 * The render process uses two dirty but necessary hacks.  First, the template function is
 * decompiled into a string (but is not modified), so that it can be eval'ed within the scope
 * of Jaml.Template.prototype. This allows the second hack, which is the use of the 'with' keyword.
 * This allows us to keep the pretty DSL-like syntax, though is not as efficient as it could be.
 */
Jaml.Template = function(tpl) {
  /**
   * @property tpl
   * @type Function
   * The function this template was created from
   */
  this.tpl = tpl;
  
  this.nodes = [];
};

Jaml.Template.prototype = {
  /**
   * Renders this template given the supplied data
   * @param {Object} thisObj Optional data object
   * @param {Object} data Optional data object
   * @return {String} The rendered HTML string
   */
  render: function(thisObj, data) {
    data = data || (thisObj = thisObj || {});
    
    //the 'data' argument can come in two flavours - array or non-array. Normalise it
    //here so that it always looks like an array.
    if (data.constructor.toString().indexOf("Array") == -1) {
      data = [data];
    }
    
    with(this) {
      for (var i=0; i < data.length; i++) {
        eval("(" + this.tpl.toString() + ").call(thisObj, data[i], i)");
      };
    }
    
    var roots  = this.getRoots(),
        output = "";
    
    for (var i=0; i < roots.length; i++) {
      output += roots[i].render();
    };
    
    return output;
  },
  
  /**
   * Returns all top-level (root) nodes in this template tree.
   * Templates are tree structures, but there is no guarantee that there is a
   * single root node (e.g. a single DOM element that all other elements nest within)
   * @return {Array} The array of root nodes
   */
  getRoots: function() {
    var roots = [];
    
    for (var i=0; i < this.nodes.length; i++) {
      var node = this.nodes[i];
      
      if (node.parent == undefined) roots.push(node);
    };
    
    return roots;
  },
  
  tags: [
    "html", "head", "body", "script", "meta", "title", "link",
    "div", "p", "span", "a", "img", "br", "hr", "em", "strong",
    "table", "tr", "th", "td", "thead", "tbody", "tfoot",
    "ul", "ol", "li", 
    "dl", "dt", "dd",
    "h1", "h2", "h3", "h4", "h5", "h6", "h7",
    "form", "fieldset", "input", "textarea", "label", "select", "option"
  ]
};

/**
 * Adds a function for each tag onto Template's prototype
 */
(function() {
  var tags = Jaml.Template.prototype.tags;

  /**
   * This function is created for each tag name and assigned to Template's
   * prototype below
   */
  var makeTagHelper = function(tagName) {
    return function(attrs) {
      var node = new Jaml.Node(tagName);

      var firstArgIsAttributes =  (typeof attrs == 'object')
                               && !(attrs instanceof Jaml.Node)
                               && !(attrs instanceof Jaml.TextNode);

      if (firstArgIsAttributes) node.setAttributes(attrs);

      var startIndex = firstArgIsAttributes ? 1 : 0;

      for (var i=startIndex; i < arguments.length; i++) {
        var arg = arguments[i];

        if (typeof arg == "string" || arg == undefined) {
          arg = new Jaml.TextNode(arg || "");
        }

        if (arg instanceof Jaml.Node || arg instanceof Jaml.TextNode) {
          arg.parent = node;
        }

        node.addChild(arg);
      };

      this.nodes.push(node);

      return node;
    };
  };

  for (var i = 0, tag; tag = tags[i]; i++) {
    Jaml.Template.prototype[tag] = makeTagHelper(tag);
  };
})();

/*7. wowpxappbundle*/
/**
 * @identity wowpxappbundle
 * @requires wowpxappjs, emilejs, jamljs
 */
 
 /*
  * This is the bundle used for creating wowpxapp.js to be used in all wowpx apps
  */
